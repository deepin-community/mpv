diff --git a/video/out/gpu/context.c b/video/out/gpu/context.c
index 6e58cce..d7a6cb1 100644
--- a/video/out/gpu/context.c
+++ b/video/out/gpu/context.c
@@ -35,6 +35,7 @@
 
 /* OpenGL */
 extern const struct ra_ctx_fns ra_ctx_glx;
+extern const struct ra_ctx_fns ra_ctx_glx_probe;
 extern const struct ra_ctx_fns ra_ctx_x11_egl;
 extern const struct ra_ctx_fns ra_ctx_drm_egl;
 extern const struct ra_ctx_fns ra_ctx_cocoa;
@@ -82,6 +83,9 @@ static const struct ra_ctx_fns *contexts[] = {
 #if HAVE_GL_WAYLAND
     &ra_ctx_wayland_egl,
 #endif
+#if HAVE_GL_X11
+    &ra_ctx_glx_probe,
+#endif
 #if HAVE_EGL_X11
     &ra_ctx_x11_egl,
 #endif
diff --git a/video/out/gpu/hwdec.h b/video/out/gpu/hwdec.h
index 050a358..f40a6f8 100644
--- a/video/out/gpu/hwdec.h
+++ b/video/out/gpu/hwdec.h
@@ -43,6 +43,7 @@ struct ra_hwdec_mapper {
     // The common code won't mess with these, so you can e.g. set them in the
     // .init() callback.
     struct ra_tex *tex[4];
+    bool vdpau_fields;
 };
 
 // This can be used to map frames of a specific hw format as GL textures.
diff --git a/video/out/gpu/video.c b/video/out/gpu/video.c
index e4c4ee9..a857103 100644
--- a/video/out/gpu/video.c
+++ b/video/out/gpu/video.c
@@ -217,6 +217,7 @@ struct gl_video {
     struct ra_tex *error_diffusion_tex[2];
     struct ra_tex *screen_tex;
     struct ra_tex *output_tex;
+    struct ra_tex *vdpau_deinterleave_tex[2];
     struct ra_tex **hook_textures;
     int num_hook_textures;
     int idx_hook_textures;
@@ -1058,6 +1059,8 @@ static void uninit_video(struct gl_video *p)
     p->hwdec_active = false;
     p->hwdec_overlay = NULL;
     ra_hwdec_mapper_free(&p->hwdec_mapper);
+    for (int n = 0; n < 2; n++)
+        ra_tex_free(p->ra, &p->vdpau_deinterleave_tex[n]);
 }
 
 static void pass_record(struct gl_video *p, struct mp_pass_perf perf)
@@ -3518,7 +3521,41 @@ void gl_video_perfdata(struct gl_video *p, struct voctrl_performance_data *out)
     frame_perf_data(p->pass_fresh,  &out->fresh);
     frame_perf_data(p->pass_redraw, &out->redraw);
 }
+// This assumes nv12, with textures set to GL_NEAREST filtering.
+static void reinterleave_vdpau(struct gl_video *p,
+                               struct ra_tex *input[4], struct ra_tex *output[2])
+{
+    for (int n = 0; n < 2; n++) {
+        struct ra_tex **tex = &p->vdpau_deinterleave_tex[n];
+        // This is an array of the 2 to-merge planes.
+        struct ra_tex **src = &input[n * 2];
+        int w = src[0]->params.w;
+        int h = src[0]->params.h;
+        int ids[2];
+        for (int t = 0; t < 2; t++) {
+            ids[t] = pass_bind(p, (struct image){
+                .tex = src[t],
+                .multiplier = 1.0,
+                .transform = identity_trans,
+                .w = w,
+                .h = h,
+            });
+        }
+
+        pass_describe(p, "vdpau reinterleaving");
+        GLSLF("color = fract(gl_FragCoord.y * 0.5) < 0.5\n");
+        GLSLF("      ? texture(texture%d, texcoord%d)\n", ids[0], ids[0]);
+        GLSLF("      : texture(texture%d, texcoord%d);", ids[1], ids[1]);
 
+        int comps = n == 0 ? 1 : 2;
+        const struct ra_format *fmt = ra_find_unorm_format(p->ra, 1, comps);
+        ra_tex_resize(p->ra, p->log, tex, w, h * 2, fmt);
+        struct ra_fbo fbo = { *tex };
+        finish_pass_fbo(p, fbo, true, &(struct mp_rect){0, 0, w, h * 2});
+
+        output[n] = *tex;
+    }
+}
 // Returns false on failure.
 static bool pass_upload_image(struct gl_video *p, struct mp_image *mpi, uint64_t id)
 {
@@ -3555,6 +3592,11 @@ static bool pass_upload_image(struct gl_video *p, struct mp_image *mpi, uint64_t
             struct mp_image layout = {0};
             mp_image_set_params(&layout, &p->image_params);
             struct ra_tex **tex = p->hwdec_mapper->tex;
+            struct ra_tex *tmp[4] = {0};
+            if (p->hwdec_mapper->vdpau_fields) {
+                reinterleave_vdpau(p, tex, tmp);
+                tex = tmp;
+            }
             for (int n = 0; n < p->plane_count; n++) {
                 vimg->planes[n] = (struct texplane){
                     .w = mp_image_plane_w(&layout, n),
diff --git a/video/out/opengl/context_glx.c b/video/out/opengl/context_glx.c
index 1accd36..991bb3c 100644
--- a/video/out/opengl/context_glx.c
+++ b/video/out/opengl/context_glx.c
@@ -328,7 +328,20 @@ uninit:
     glx_uninit(ctx);
     return false;
 }
+static bool glx_init_probe(struct ra_ctx *ctx)
+{
+    if (!glx_init(ctx))
+        return false;
+
+    struct priv *p = ctx->priv;
+    if (!(p->gl.mpgl_caps & MPGL_CAP_VDPAU)) {
+        MP_VERBOSE(ctx, "No vdpau support found - probing more things.\n");
+        glx_uninit(ctx);
+        return false;
+    }
 
+    return true;
+}
 
 static void resize(struct ra_ctx *ctx)
 {
@@ -370,3 +383,13 @@ const struct ra_ctx_fns ra_ctx_glx = {
     .init           = glx_init,
     .uninit         = glx_uninit,
 };
+const struct ra_ctx_fns ra_ctx_glx_probe = {
+    .type           = "opengl",
+    .name           = "x11probe",
+    .reconfig       = glx_reconfig,
+    .control        = glx_control,
+    .wakeup         = glx_wakeup,
+    .wait_events    = glx_wait_events,
+    .init           = glx_init_probe,
+    .uninit         = glx_uninit,
+};
diff --git a/video/out/opengl/hwdec_vdpau.c b/video/out/opengl/hwdec_vdpau.c
index df58905..10bd66c 100644
--- a/video/out/opengl/hwdec_vdpau.c
+++ b/video/out/opengl/hwdec_vdpau.c
@@ -18,6 +18,8 @@
 #include <stddef.h>
 #include <assert.h>
 
+#include <GL/glx.h>
+
 #include "video/out/gpu/hwdec.h"
 #include "ra_gl.h"
 #include "video/vdpau.h"
@@ -35,18 +37,18 @@ struct priv {
     struct mp_vdpau_ctx *ctx;
     GL *gl;
     uint64_t preemption_counter;
-    GLuint gl_texture;
+    GLuint gl_textures[4];
     bool vdpgl_initialized;
     GLvdpauSurfaceNV vdpgl_surface;
     VdpOutputSurface vdp_surface;
     struct mp_vdpau_mixer *mixer;
-    struct ra_imgfmt_desc direct_desc;
+    bool direct_mode;
     bool mapped;
 };
 
 static int init(struct ra_hwdec *hw)
 {
-    Display *x11disp = ra_get_native_resource(hw->ra, "x11");
+    Display *x11disp = glXGetCurrentDisplay();
     if (!x11disp || !ra_is_gl(hw->ra))
         return -1;
     GL *gl = ra_gl_get(hw->ra);
@@ -84,6 +86,10 @@ static void mapper_unmap(struct ra_hwdec_mapper *mapper)
 
     if (p->mapped) {
         gl->VDPAUUnmapSurfacesNV(1, &p->vdpgl_surface);
+        if (p->direct_mode) {
+            gl->VDPAUUnregisterSurfaceNV(p->vdpgl_surface);
+            p->vdpgl_surface = 0;
+        }
     }
     p->mapped = false;
 }
@@ -109,7 +115,7 @@ static void mapper_uninit(struct ra_hwdec_mapper *mapper)
         gl->VDPAUUnregisterSurfaceNV(p->vdpgl_surface);
     p->vdpgl_surface = 0;
 
-    gl->DeleteTextures(1, &p->gl_texture);
+    gl->DeleteTextures(4, p->gl_textures);
 
     if (p->vdp_surface != VDP_INVALID_HANDLE) {
         vdp_st = vdp->output_surface_destroy(p->vdp_surface);
@@ -155,32 +161,50 @@ static int mapper_init(struct ra_hwdec_mapper *mapper)
 
     p->vdpgl_initialized = true;
 
-    gl->GenTextures(1, &p->gl_texture);
-
-    gl->BindTexture(GL_TEXTURE_2D, p->gl_texture);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
-    gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
-    gl->BindTexture(GL_TEXTURE_2D, 0);
-
-    vdp_st = vdp->output_surface_create(p->ctx->vdp_device,
-                                        VDP_RGBA_FORMAT_B8G8R8A8,
-                                        mapper->src_params.w,
-                                        mapper->src_params.h,
-                                        &p->vdp_surface);
-    CHECK_VDP_ERROR(mapper, "Error when calling vdp_output_surface_create");
-
-    p->vdpgl_surface = gl->VDPAURegisterOutputSurfaceNV(BRAINDEATH(p->vdp_surface),
-                                                        GL_TEXTURE_2D,
-                                                        1, &p->gl_texture);
-    if (!p->vdpgl_surface)
-        return -1;
+    p->direct_mode = mapper->dst_params.hw_subfmt == IMGFMT_NV12 ||
+                     mapper->dst_params.hw_subfmt == IMGFMT_420P;
+    mapper->vdpau_fields = p->direct_mode;
+
+    gl->GenTextures(4, p->gl_textures);
+
+    if (p->direct_mode) {
+        mapper->dst_params.imgfmt = IMGFMT_NV12;
+        mapper->dst_params.hw_subfmt = 0;
+
+        for (int n = 0; n < 4; n++) {
+            gl->BindTexture(GL_TEXTURE_2D, p->gl_textures[n]);
+            gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+            gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+            gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+            gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+            gl->BindTexture(GL_TEXTURE_2D, 0);
+        }
+    } else {
+        gl->BindTexture(GL_TEXTURE_2D, p->gl_textures[0]);
+        gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+        gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+        gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
+        gl->TexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
+        gl->BindTexture(GL_TEXTURE_2D, 0);
+
+        vdp_st = vdp->output_surface_create(p->ctx->vdp_device,
+                                            VDP_RGBA_FORMAT_B8G8R8A8,
+                                            mapper->src_params.w,
+                                            mapper->src_params.h,
+                                            &p->vdp_surface);
+        CHECK_VDP_ERROR(mapper, "Error when calling vdp_output_surface_create");
+
+        p->vdpgl_surface = gl->VDPAURegisterOutputSurfaceNV(BRAINDEATH(p->vdp_surface),
+                                                            GL_TEXTURE_2D,
+                                                            1, p->gl_textures);
+        if (!p->vdpgl_surface)
+            return -1;
 
-    gl->VDPAUSurfaceAccessNV(p->vdpgl_surface, GL_READ_ONLY);
+        gl->VDPAUSurfaceAccessNV(p->vdpgl_surface, GL_READ_ONLY);
 
-    mapper->dst_params.imgfmt = IMGFMT_RGB0;
-    mapper->dst_params.hw_subfmt = 0;
+        mapper->dst_params.imgfmt = IMGFMT_RGB0;
+        mapper->dst_params.hw_subfmt = 0;
+    }
 
     gl_check_error(gl, mapper->log, "After initializing vdpau OpenGL interop");
 
@@ -191,6 +215,8 @@ static int mapper_map(struct ra_hwdec_mapper *mapper)
 {
     struct priv *p = mapper->priv;
     GL *gl = p->gl;
+    struct vdp_functions *vdp = &p->ctx->vdp;
+    VdpStatus vdp_st;
 
     int pe = mp_vdpau_handle_preemption(p->ctx, &p->preemption_counter);
     if (pe < 1) {
@@ -202,33 +228,75 @@ static int mapper_map(struct ra_hwdec_mapper *mapper)
             return -1;
     }
 
-    if (!p->vdpgl_surface)
-        return -1;
+    if (p->direct_mode) {
+        VdpVideoSurface surface = (intptr_t)mapper->src->planes[3];
 
-    mp_vdpau_mixer_render(p->mixer, NULL, p->vdp_surface, NULL, mapper->src,
-                            NULL);
+        // We need the uncropped size.
+        VdpChromaType s_chroma_type;
+        uint32_t s_w, s_h;
+        vdp_st = vdp->video_surface_get_parameters(surface, &s_chroma_type, &s_w, &s_h);
+        CHECK_VDP_ERROR(mapper, "Error when calling vdp_video_surface_get_parameters");
 
-    gl->VDPAUMapSurfacesNV(1, &p->vdpgl_surface);
+        p->vdpgl_surface = gl->VDPAURegisterVideoSurfaceNV(BRAINDEATH(surface),
+                                                           GL_TEXTURE_2D,
+                                                           4, p->gl_textures);
+        if (!p->vdpgl_surface)
+            return -1;
 
-    p->mapped = true;
+        gl->VDPAUSurfaceAccessNV(p->vdpgl_surface, GL_READ_ONLY);
+        gl->VDPAUMapSurfacesNV(1, &p->vdpgl_surface);
+
+        p->mapped = true;
+
+        for (int n = 0; n < 4; n++) {
+            bool chroma = n >= 2;
+
+            struct ra_tex_params params = {
+                .dimensions = 2,
+                .w = s_w / (chroma ? 2 : 1),
+                .h = s_h / (chroma ? 4 : 2),
+                .d = 1,
+                .format = ra_find_unorm_format(mapper->ra, 1, chroma ? 2 : 1),
+                .render_src = true,
+            };
+
+            if (!params.format)
+                return -1;
+
+            mapper->tex[n] =
+                ra_create_wrapped_tex(mapper->ra, &params, p->gl_textures[n]);
+            if (!mapper->tex[n])
+                return -1;
+        }
+    } else {
+        if (!p->vdpgl_surface)
+            return -1;
 
-    struct ra_tex_params params = {
-        .dimensions = 2,
-        .w = mapper->src_params.w,
-        .h = mapper->src_params.h,
-        .d = 1,
-        .format = ra_find_unorm_format(mapper->ra, 1, 4),
-        .render_src = true,
-        .src_linear = true,
-    };
+        mp_vdpau_mixer_render(p->mixer, NULL, p->vdp_surface, NULL, mapper->src,
+                              NULL);
 
-    if (!params.format)
-        return -1;
+        gl->VDPAUMapSurfacesNV(1, &p->vdpgl_surface);
 
-    mapper->tex[0] =
-        ra_create_wrapped_tex(mapper->ra, &params, p->gl_texture);
-    if (!mapper->tex[0])
-        return -1;
+        p->mapped = true;
+
+        struct ra_tex_params params = {
+            .dimensions = 2,
+            .w = mapper->src_params.w,
+            .h = mapper->src_params.h,
+            .d = 1,
+            .format = ra_find_unorm_format(mapper->ra, 1, 4),
+            .render_src = true,
+            .src_linear = true,
+        };
+
+        if (!params.format)
+            return -1;
+
+        mapper->tex[0] =
+            ra_create_wrapped_tex(mapper->ra, &params, p->gl_textures[0]);
+        if (!mapper->tex[0])
+            return -1;
+    }
 
     return 0;
 }
